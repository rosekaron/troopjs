Ext.data.JsonP.composer_mixin_factory({"tagname":"class","name":"composer.mixin.factory","autodetected":{},"files":[{"filename":"factory.js","href":"factory.html#composer-mixin-factory"}],"singleton":true,"members":[{"name":"constructor","tagname":"method","owner":"composer.mixin.factory","id":"method-constructor","meta":{}},{"name":"create","tagname":"method","owner":"composer.mixin.factory","id":"method-create","meta":{}},{"name":"extend","tagname":"method","owner":"composer.mixin.factory","id":"method-extend","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-composer.mixin.factory","short_doc":"The factory module establishes the fundamental object composition in TroopJS:\n\n\nFirst-class mixin based on prototype,...","classIcon":"icon-singleton","superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/factory.html#composer-mixin-factory' target='_blank'>factory.js</a></div></pre><div class='doc-contents'><p>The factory module establishes the fundamental object composition in TroopJS:</p>\n\n<ul>\n<li><strong>First-class mixin</strong> based on prototype, that supports deterministic multiple inheritance that:\n\n<ul>\n<li>Eliminating the frustrating issues from multi-tiered, single-rooted ancestry;</li>\n<li>Avoid occasionally unexpected modification from prototype chain, from the prototype-based inheritance;</li>\n<li>Reduced the function creation overhead in classical inheritance pattern;</li>\n</ul>\n</li>\n<li><strong>Advice decorator</strong> for method overriding without the need for super call;</li>\n<li><strong>Declarative</strong> \"special\" functions preserved for sending messages to object, that never overrides parent ones.</li>\n</ul>\n\n\n<p>Basically Factory takes objects or constructors as arguments and returns a new constructor, the arguments are\ncomposed from left to right, later arguments taken precedence (overriding) former arguments,\nand any functions be executed on construction from left to right.</p>\n\n<pre><code>    // Define the constructor.\n    var MyClass = Factory(function() {\n        // initialize the object...\n        this.baz = \"quz\";\n    },\n    {\n        foo: \"bar\",\n        do: function(){\n            return \"work\";\n        },\n\n        // a special handler for \"signal\" type with value \"foo\".\n        \"signal/foo\": function() {}\n\n    });\n\n    var MyBehavior =  Factory({\n        somethingElse: function(){}\n    });\n\n    // SubClass extends from MyClass and mixin MyBehavior\n    var SubClass = MyClass.extend(function() {\n        // initialize the object...\n    },\n\n    MyBehavior,\n    {\n        // Overwrite parent.\n        foo: \"baz\",\n\n        // Override parent with after call.\n        do: Factory.after(function(retval) {\n            return retval + \",\" + \"play\";\n        }),\n\n        move: function(){}\n    });\n\n    // Instantiate the subClass.\n    var instance = SubClass.create({\n        evenMore: function(){}\n    });\n\n    // \"baz\"\n    instance.foo;\n\n    // \"quz\"\n    instance.baz;\n\n    // \"work play\"\n    instance.do();\n\n    instance.somethingElse();\n    instance.evenMore();\n</code></pre>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-constructor' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='composer.mixin.factory'>composer.mixin.factory</span><br/><a href='source/factory.html#composer-mixin-factory-method-constructor' target='_blank' class='view-source'>view source</a></div><a href='#!/api/composer.mixin.factory-method-constructor' class='name expandable'>composer.mixin.factory</a>( <span class='pre'>mixin</span> ) : Function<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a new constructor or to extend an existing one from multiple others constructors/objects. ...</div><div class='long'><p>Create a new constructor or to extend an existing one from multiple others constructors/objects.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mixin</span> : ...Function|...Object<div class='sub-desc'><p>One or more constructors or objects to be mixed in.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>The constructor (class).</p>\n</div></li></ul></div></div></div><div id='method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='composer.mixin.factory'>composer.mixin.factory</span><br/><a href='source/factory.html#composer-mixin-factory-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/composer.mixin.factory-method-create' class='name expandable'>create</a>( <span class='pre'>mixin</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Instantiate immediately after extending this constructor from multiple others constructors/objects. ...</div><div class='long'><p>Instantiate immediately after extending this constructor from multiple others constructors/objects.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mixin</span> : ...Function|...Object<div class='sub-desc'><p>One or more constructors or objects to be mixed in.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Object instance created out of the mixin of constructors and objects.</p>\n</div></li></ul></div></div></div><div id='method-extend' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='composer.mixin.factory'>composer.mixin.factory</span><br/><a href='source/factory.html#composer-mixin-factory-method-extend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/composer.mixin.factory-method-extend' class='name expandable'>extend</a>( <span class='pre'>mixin</span> ) : Function<span class=\"signature\"></span></div><div class='description'><div class='short'>Extend this constructor from multiple others constructors/objects. ...</div><div class='long'><p>Extend this constructor from multiple others constructors/objects.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>mixin</span> : ...Function|...Object<div class='sub-desc'><p>One or more constructors or objects to be mixed in.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>The extended subclass.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{"singleton":true}});