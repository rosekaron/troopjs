Ext.data.JsonP.composer_decorator_after({"uses":[],"mixedInto":[],"return":{"type":"composer.mixin.decorator","properties":null,"doc":"\n","html_type":"<a href=\"#!/api/composer.mixin.decorator\" rel=\"composer.mixin.decorator\" class=\"docClass\">composer.mixin.decorator</a>","name":"return"},"alternateClassNames":[],"parentMixins":[],"aliases":{},"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/after.html#composer-decorator-after' target='_blank'>after.js</a></div></pre><div class='doc-contents'><p>Create a decorator method that is to add code that will be executed after the original method.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>func</span> : Function<div class='sub-desc'><p>The decorator function which receives the arguments of the original, it's return value (if\nnot undefined) will be the used as the new return value.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/composer.mixin.decorator\" rel=\"composer.mixin.decorator\" class=\"docClass\">composer.mixin.decorator</a></span><div class='sub-desc'>\n</div></li></ul></div><div class='members'></div></div>","autodetected":{},"members":[],"tagname":"class","short_doc":"Create a decorator method that is to add code that will be executed after the original method. ...","superclasses":[],"meta":{},"subclasses":[],"files":[{"href":"after.html#composer-decorator-after","filename":"after.js"}],"name":"composer.decorator.after","requires":[],"mixins":[],"component":false,"id":"class-composer.decorator.after","params":[{"type":"Function","doc":"<p>The decorator function which receives the arguments of the original, it's return value (if\nnot undefined) will be the used as the new return value.</p>\n","html_type":"Function","tagname":"params","name":"func"}]});