Ext.data.JsonP.core_component_factory({"meta":{},"autodetected":{},"component":false,"superclasses":[],"members":[{"meta":{},"tagname":"method","owner":"core.component.factory","name":"Factory","id":"method-Factory"},{"meta":{"static":true},"tagname":"method","owner":"core.component.factory","name":"after","id":"static-method-after"},{"meta":{"static":true},"tagname":"method","owner":"core.component.factory","name":"around","id":"static-method-around"},{"meta":{"static":true},"tagname":"method","owner":"core.component.factory","name":"before","id":"static-method-before"},{"meta":{"static":true},"tagname":"method","owner":"core.component.factory","name":"create","id":"static-method-create"},{"meta":{"static":true},"tagname":"method","owner":"core.component.factory","name":"extend","id":"static-method-extend"}],"mixedInto":[],"mixins":[],"tagname":"class","parentMixins":[],"subclasses":[],"requires":[],"name":"core.component.factory","html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/factory.html#core-component-factory' target='_blank'>factory.js</a></div></pre><div class='doc-contents'><p>The factory module establishes the fundamental object composing in TroopJS:</p>\n\n<ul>\n<li><strong>First-class mixin</strong> based on prototype, that supports deterministic multiple inheritance that:\n\n<ul>\n<li>Eliminating the frustrating issues from multi-tiered, single-rooted ancestry;</li>\n<li>Avoid occasionally unexpected modification from prototype chain, from the prototype-based inheritance;</li>\n<li>Reduced the function creation overhead in classical inheritance pattern;</li>\n</ul>\n</li>\n<li><strong>Advice decorator</strong> for method overriding without the need for super call;</li>\n<li><strong>Declarative</strong> \"special\" functions preserved for sending messages to object, that never overrides parent ones.</li>\n</ul>\n\n\n<p>Basically Factory takes objects or constructors as arguments and returns a new constructor, the arguments are\ncomposed from left to right, later arguments taken precedence (overriding) former arguments,\nand any functions be executed on construction from left to right.</p>\n\n<pre><code>    // Define the constructor.\n    var MyClass = Factory(function() {\n        // initialize the object...\n        this.baz = \"quz\";\n    },\n    {\n        foo: \"bar\",\n        do: function(){\n            return \"work\";\n        },\n\n        // a special handler for \"signal\" type with value \"foo\".\n        \"signal/foo\": function() {}\n\n    });\n\n    var MyBehavior =  Factory({\n        somethingElse: function(){}\n    });\n\n    // SubClass extends from MyClass and mixin MyBehavior\n    var SubClass = MyClass.extend(function() {\n        // initialize the object...\n    },\n\n    MyBehavior,\n    {\n        // Overwrite parent.\n        foo: \"baz\",\n\n        // Override parent with after call.\n        do: Factory.after(function(retval) {\n            return retval + \",\" + \"play\";\n        }),\n\n        move: function(){}\n    });\n\n    // Instantiate the subClass.\n    var instance = SubClass.create({\n        evenMore: function(){}\n    });\n\n    // \"baz\"\n    instance.foo;\n\n    // \"quz\"\n    instance.baz;\n\n    // \"work play\"\n    instance.do();\n\n    instance.somethingElse();\n    instance.evenMore();\n</code></pre>\n</div><div class='members'><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Instance methods</h3><div id='method-Factory' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='core.component.factory'>core.component.factory</span><br/><a href='source/factory.html#core-component-factory-method-Factory' target='_blank' class='view-source'>view source</a></div><a href='#!/api/core.component.factory-method-Factory' class='name expandable'>Factory</a>( <span class='pre'>constructor, spec</span> ) : Function<span class=\"signature\"></span></div><div class='description'><div class='short'>The class composer function. ...</div><div class='long'><p>The class composer function.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>constructor</span> : Function...<div class='sub-desc'><p>(s) One or more function(s) to be called upon.</p>\n\n\n\n</div></li><li><span class='pre'>spec</span> : Object<div class='sub-desc'><p>The object specification that describes properties.</p>\n\n\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>The constructor(class).</p>\n</div></li></ul></div></div></div></div><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static methods</h3><div id='static-method-after' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='core.component.factory'>core.component.factory</span><br/><a href='source/factory.html#core-component-factory-static-method-after' target='_blank' class='view-source'>view source</a></div><a href='#!/api/core.component.factory-static-method-after' class='name expandable'>after</a>( <span class='pre'>decorated</span> ) : <a href=\"#!/api/core.component.factory.Decorator\" rel=\"core.component.factory.Decorator\" class=\"docClass\">core.component.factory.Decorator</a><span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Create a decorator function property to override the original one from prototype, that runs after\nthe completion of t...</div><div class='long'><p>Create a decorator function property to override the original one from prototype, that runs after\nthe completion of the former.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>decorated</span> : Function<div class='sub-desc'><p>The decorator function which receives the return value from the original.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/core.component.factory.Decorator\" rel=\"core.component.factory.Decorator\" class=\"docClass\">core.component.factory.Decorator</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-around' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='core.component.factory'>core.component.factory</span><br/><a href='source/factory.html#core-component-factory-static-method-around' target='_blank' class='view-source'>view source</a></div><a href='#!/api/core.component.factory-static-method-around' class='name expandable'>around</a>( <span class='pre'>decorated</span> ) : <a href=\"#!/api/core.component.factory.Decorator\" rel=\"core.component.factory.Decorator\" class=\"docClass\">core.component.factory.Decorator</a><span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Create a decorator function property to override the original one from prototype, that get passed the original\nfuncti...</div><div class='long'><p>Create a decorator function property to override the original one from prototype, that get passed the original\nfunction, eventually reach the maximum flexibility on execution flow.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>decorated</span> : Function<div class='sub-desc'><p>The decorator function which receives the original function as parameter.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/core.component.factory.Decorator\" rel=\"core.component.factory.Decorator\" class=\"docClass\">core.component.factory.Decorator</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-before' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='core.component.factory'>core.component.factory</span><br/><a href='source/factory.html#core-component-factory-static-method-before' target='_blank' class='view-source'>view source</a></div><a href='#!/api/core.component.factory-static-method-before' class='name expandable'>before</a>( <span class='pre'>decorated</span> ) : <a href=\"#!/api/core.component.factory.Decorator\" rel=\"core.component.factory.Decorator\" class=\"docClass\">core.component.factory.Decorator</a><span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Create a decorator function property to override the original one from prototype, that runs before\nthe start of the f...</div><div class='long'><p>Create a decorator function property to override the original one from prototype, that runs before\nthe start of the former.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>decorated</span> : Function<div class='sub-desc'><p>The decorator function which receives the same arguments as with the original.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/core.component.factory.Decorator\" rel=\"core.component.factory.Decorator\" class=\"docClass\">core.component.factory.Decorator</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='core.component.factory'>core.component.factory</span><br/><a href='source/factory.html#core-component-factory-static-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/core.component.factory-static-method-create' class='name expandable'>create</a>( <span class='pre'>constructor, spec</span> ) : Object<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Sub classing from this component, and to instantiate it immediately. ...</div><div class='long'><p>Sub classing from this component, and to instantiate it immediately.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>constructor</span> : Function...<div class='sub-desc'><p>(s) One or more function(s) to be called upon.</p>\n\n\n\n</div></li><li><span class='pre'>spec</span> : Object<div class='sub-desc'><p>The object specification that describes properties.</p>\n\n\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>Instance of this class.</p>\n</div></li></ul></div></div></div><div id='static-method-extend' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='core.component.factory'>core.component.factory</span><br/><a href='source/factory.html#core-component-factory-static-method-extend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/core.component.factory-static-method-extend' class='name expandable'>extend</a>( <span class='pre'>constructor, spec</span> ) : Function<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Sub classing from this component. ...</div><div class='long'><p>Sub classing from this component.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>constructor</span> : Function...<div class='sub-desc'><p>(s) One or more function(s) to be called upon.</p>\n\n\n\n</div></li><li><span class='pre'>spec</span> : Object<div class='sub-desc'><p>The object specification that describes properties.</p>\n\n\n\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>The extended subclass.</p>\n</div></li></ul></div></div></div></div></div></div></div>","uses":[],"id":"class-core.component.factory","aliases":{},"alternateClassNames":[],"files":[{"href":"factory.html#core-component-factory","filename":"factory.js"}],"short_doc":"The factory module establishes the fundamental object composing in TroopJS:\n\n\nFirst-class mixin based on prototype, t..."});